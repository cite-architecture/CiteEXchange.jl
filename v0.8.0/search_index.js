var documenterSearchIndex = {"docs":
[{"location":"apis/#API-documentation","page":"API documentation","title":"API documentation","text":"","category":"section"},{"location":"apis/#Exported-types-and-functions","page":"API documentation","title":"Exported types and functions","text":"","category":"section"},{"location":"apis/#The-Block-data-type","page":"API documentation","title":"The Block data type","text":"","category":"section"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"Block\nblocktypes\ncexversion","category":"page"},{"location":"apis/#CiteEXchange.Block","page":"API documentation","title":"CiteEXchange.Block","text":"A single block of CEX data.\n\n\n\n\n\n","category":"type"},{"location":"apis/#CiteEXchange.blocktypes","page":"API documentation","title":"CiteEXchange.blocktypes","text":"Find list of unique block types in a group.\n\nblocktypes(blockgroup)\n\n\n\n\n\n\nFind list of unique block types in a group.\n\nblocktypes(cexsrc)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/#CiteEXchange.cexversion","page":"API documentation","title":"CiteEXchange.cexversion","text":"Find CEX version for a block group.\n\ncexversion(group)\n\n\nReturn nothing if no version specified.\n\n\n\n\n\n","category":"function"},{"location":"apis/#The-blocks-function","page":"API documentation","title":"The blocks function","text":"","category":"section"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"blocks","category":"page"},{"location":"apis/#CiteEXchange.blocks","page":"API documentation","title":"CiteEXchange.blocks","text":"Find blocks of a given type in a blockgroup. \n\nblocks(blockgroup, blocktype)\n\n\n\n\n\n\nParse s into an Array of Blocks.\n\nblocks(s)\n\n\n\n\n\n\nParse s into an Array of Blocks.\n\nblocks(s, sreader)\n\n\n\n\n\n\nParse CEX data from file fname into an Array of Blocks.\n\nblocks(fname, freader)\n\n\n\n\n\n\nParse CEX data from url into an Array of Blocks.\n\nblocks(url, ureader)\n\n\n\n\n\n\nParse cexsrc and find blocks of type blocktype.\n\nblocks(cexsrc, blocktype)\n\n\n\n\n\n\nFind blocks of type blocktype in a CEX source to read with reader T.\n\nblocks(cexsrc, T, blocktype)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/#The-data-function","page":"API documentation","title":"The data function","text":"","category":"section"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"data","category":"page"},{"location":"apis/#CiteEXchange.data","page":"API documentation","title":"CiteEXchange.data","text":"Find data lines for all blocks of type blocktype in a Vector of Blocks.\n\ndata(blockgroup, blocktype; delimiter, complement)\n\n\n\n\n\n\nFind data lines for all blocks of type blocktype in the CEX string s.\n\ndata(s, blocktype; delimiter, complement)\n\n\n\n\n\n\nFind data lines for all blocks of type blocktype after parsing the CEX source with reader T.\n\ndata(src, T, blocktype; delimiter, complement)\n\n\n\n\n\n\nFind data lines for all blocks of type blocktype in the CEX string s and filter by urn containment on urn.\n\ndata(s, blocktype, urn; delimiter, complement)\n\n\n\n\n\n\nFind data lines for all blocks of type blocktype in the CEX string s and filter by urn containment on urn.\n\ndata(blockgroup, blocktype, urn; delimiter, complement)\n\n\n\n\n\n\n","category":"function"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"root = pwd() |> dirname |> dirname\nf = joinpath(root, \"test\", \"assets\", \"burneyex.cex\")","category":"page"},{"location":"blocks/#The-blocks-function","page":"The blocks function","title":"The blocks function","text":"","category":"section"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"The blocks function can:","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"parse a CEX data source into Blocks, optionally filtering it by block type\nfilter a list of Blocks by block type","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"It always returns a (possibly empty) Vector of Blocks.","category":"page"},{"location":"blocks/#Parsing-a-CEX-data-source","page":"The blocks function","title":"Parsing a CEX data source","text":"","category":"section"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"The following examples parse a CEX source with two blocks, one a ctscatalog block, the other a ctsdata block.  They parse identical data from a URL, a file (f in the example below is test/assets/burneyex.cex in this github repository), and a string value using blocks with a specified \"reader\".","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"Parse CEX from a URL:","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"using CiteEXchange\nurl = \"https://raw.githubusercontent.com/cite-architecture/CiteEXchange.jl/main/test/assets/burneyex.cex\"\nurlblocks = blocks(url, CiteEXchange.UrlReader)","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"From a file:","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"fileblocks = blocks(f, CiteEXchange.FileReader)","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"From a string:","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"cexstring = read(f, String)\nstringblocks = blocks(cexstring, CiteEXchange.StringReader)","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"The default is to parse from a string.","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"defaultblocks = blocks(cexstring)","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"The results are equivalent.","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"urlblocks == fileblocks == stringblocks == defaultblocks","category":"page"},{"location":"blocks/#Filter-CEX-source-by-type","page":"The blocks function","title":"Filter CEX source by type","text":"","category":"section"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"Specify the String value of a CEX block type as an additional parameter to filter the resulting Vector of Blocks to include only blocks of that type.","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"urlcatalog = blocks(url, CiteEXchange.UrlReader, \"ctscatalog\")\nfilecatalog = blocks(f, CiteEXchange.FileReader, \"ctscatalog\")\nstringcatalog = blocks(cexstring, CiteEXchange.StringReader, \"ctscatalog\")\ndefaultcatalog = blocks(cexstring, \"ctscatalog\")","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"urlcatalog == filecatalog == stringcatalog == defaultcatalog","category":"page"},{"location":"blocks/#Filter-a-list-of-Blocks-by-type","page":"The blocks function","title":"Filter a list of Blocks by type","text":"","category":"section"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"The blocks function can also  be used to select blocks of a given type from a list of Blocks.","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"filteredcatalog = blocks(fileblocks, \"ctscatalog\")","category":"page"},{"location":"blocks/","page":"The blocks function","title":"The blocks function","text":"filteredcatalog == filecatalog","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"root = pwd() |> dirname |> dirname\nf = joinpath(root, \"test\", \"assets\", \"burneyex.cex\")\n\nusing CitableBase\nusing CiteEXchange\n\nstruct UnstructuredUrn <: Urn\n    id::AbstractString\nend\n\nimport Base: show\nfunction show(io::IO, u::UnstructuredUrn)\n    print(io, u.id)\nend\n\nstruct MyComparable <: UrnComparisonTrait end\n\nimport CitableBase: urncomparisontrait\nfunction urncomparisontrait(::Type{UnstructuredUrn})\n    MyComparable()\nend\n\nimport CitableBase: urnequals\nfunction urnequals(::MyComparable, u1::UnstructuredUrn, u2::UnstructuredUrn)\n    u1 == u2\nend\nimport CitableBase: urncontains\nfunction urncontains(::MyComparable, u1::UnstructuredUrn, u2::UnstructuredUrn)\n    c1 = components(u1.id)\n    c2 = components(u2.id)\n    c1[3] == c2[3]\nend\n\nimport CitableBase: urnsimilar\nfunction urnsimilar(::MyComparable, u1::UnstructuredUrn, u2::UnstructuredUrn)\n    urncontains(u1, u2)\nend\n\nroot = pwd() |> dirname |> dirname\nf = joinpath(root, \"test\", \"assets\", \"laxlibrary1.cex\")\n","category":"page"},{"location":"data/#The-data-function","page":"The data function","title":"The data function","text":"","category":"section"},{"location":"data/","page":"The data function","title":"The data function","text":"The data function can:","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"select data lines for a specified block type from a CEX source or from a list of Blocks \noptionally filter data by a URN value","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"It always returns a (possibly empty) Vector of string values representing CEX data lines.","category":"page"},{"location":"data/#Select-data-lines-from-CEX-sources","page":"The data function","title":"Select data lines from CEX sources","text":"","category":"section"},{"location":"data/","page":"The data function","title":"The data function","text":"In this example, we work with a CEX source that has several different kinds of CEX blocks, and two ctsdata blocks with passages from two different texts.  We can collect all of the text datalines using the same syntax as for the blocks function.","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"url = \"https://raw.githubusercontent.com/cite-architecture/CiteEXchange.jl/dev/test/assets/laxlibrary1.cex\"\nstr = read(f, String)\n\nlines1 = data(f, CiteEXchange.FileReader, \"ctsdata\")\nlines2 = data(url, CiteEXchange.UrlReader, \"ctsdata\")\nlines3 = data(str, CiteEXchange.StringReader, \"ctsdata\")\nlines4 = data(str, \"ctsdata\")","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"lines1 == lines2 == lines3 == lines4","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"Note in particular that citerelationset blocks have three lines of metadata before the relations data. These three lines appear in the lines field of a block, but are not included in the output of data.","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"relblocks = blocks(str, \"citerelationset\")\nrelblocks[1].lines","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"data(str, \"citerelationset\")","category":"page"},{"location":"data/#Select-data-lines-from-a-list-of-Blocks","page":"The data function","title":"Select data lines from a list of Blocks","text":"","category":"section"},{"location":"data/","page":"The data function","title":"The data function","text":"Instead of a CEX source, you can also directly supply a list of blocks (without a \"reader\" type). ","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"blockgroup = blocks(str)\nblocklines = data(blockgroup, \"ctsdata\")","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"blocklines == lines3","category":"page"},{"location":"data/#Filter-data-lines-by-URN","page":"The data function","title":"Filter data lines by URN","text":"","category":"section"},{"location":"data/","page":"The data function","title":"The data function","text":"The data function optionally accepts a third parameter with a URN value to filter on by URN containment.  The background setup for this page has defined a subtype of Urn called UnstructuredUrn that accepts any kind of URN string, and has implemented the UrnComparisonTrait for the type, so we can use UnstructuredUrn values to filter the data from blocks in our source.","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"note: Realistic URN types\nThe UnstructuredUrn is used solely for the purposes of testing the CiteEXchange package.  In our experience, we can cover all needs for scholarly citation with either the CtsUrn type of the CitableText package, or the Cite2Urn of the CitableObject package.","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"When we collected all the ctsdata lines, we got five passages from two different texts.  Now we'll filter the request to get data from a single text.","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"urn = UnstructuredUrn(\"urn:cts:citedemo:gburg\")\ntextdata = data(str, \"ctsdata\", urn)","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"URN filtering can be used with any of the variations of the data function, including filtering Blocks.","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"blks = blocks(f, CiteEXchange.FileReader)\ntextfromblocks = data(blks, \"ctsdata\", urn)","category":"page"},{"location":"data/#Negating-a-URN-filter","page":"The data function","title":"Negating a URN filter","text":"","category":"section"},{"location":"data/","page":"The data function","title":"The data function","text":"To collect all data lines that are not contained by a URN filter, set the optional parameter complement to true.","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"urn = UnstructuredUrn(\"urn:cts:citedemo:gburg\")\ntextdata = data(str, \"ctsdata\", urn, complement=true)","category":"page"},{"location":"data/#Filtering-citerelationsets","page":"The data function","title":"Filtering citerelationsets","text":"","category":"section"},{"location":"data/","page":"The data function","title":"The data function","text":"Note that when filtering citerelationsets by URN value, the filter applies to the URN for an entire relation set, not to URNs in individual relations.","category":"page"},{"location":"data/","page":"The data function","title":"The data function","text":"relsetfilter = UnstructuredUrn(\"urn:cite2:hmt:dse.v1:\")\ndata(str, \"citerelationset\", relsetfilter)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"root = pwd() |> dirname |> dirname\nf = joinpath(root, \"test\", \"assets\", \"burneyex.cex\")","category":"page"},{"location":"#CiteEXchange","page":"Overview","title":"CiteEXchange","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Parse data in the delimited-text CEX format.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Cite EXchange format (CEX) is a plain-text format for serializing citable scholarly resources. CEX organizes data in one or more blocks defined by a CEX header line.  Using the CiteEXchange package, you can work with data from CEX sources as labelled Blocks with associated lines of metadata and data, can extract data contents by CEX block type, and can filter contents by URN.","category":"page"},{"location":"#Quick-introduction","page":"Overview","title":"Quick introduction","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"You can use the blocks function to read source data into a Vector of Block objects.  This example reads a file with two blocks, one labelled ctscatalog and one labelled ctsdata.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using CiteEXchange\nblocklist = blocks(f, CiteEXchange.FileReader)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"note: Note\nThe file f in the example below is test/assets/burneyex.cex in this github repository.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Each Block has a label and an array of data lines.  You can work directly with the array of blocks:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"blocklist[1].label","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"blocklist[1].lines","category":"page"},{"location":"#In-more-detail","page":"Overview","title":"In more detail","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"The CiteEXchange package provides two main functions for working with CEX data:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"the blocks function parses and filters CEX sources into lists of Blocks\nthe data function parses and filters CEX sources, and extracts only the data lines from the resulting Blocks","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"They are documented on the following pages.","category":"page"}]
}
